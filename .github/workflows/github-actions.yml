# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches:
#   - master
    - develop

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    env :
      working-directory: ./
      APPLICATION: ${{ secrets.APPLICATION }}
      FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
      DOCKER_HUB_REPO: ${{ secrets.DOCKER_HUB_REPO }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}

    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
#    - name: Gradle Caching
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-
    
    ## create application.yml
    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.yml
    - run: echo "${{ env.APPLICATION }}" > ./src/main/resources/application.yml
    - uses: actions/upload-artifact@v2
      with:
        name: application.yml
        path: ./src/main/resources/application.yml

    ## create firebase-key.json
    - uses: actions/checkout@v3
    - run: mkdir ./src/main/resources/firebase
    - run: touch ./firebase-key.json
    - run: echo "${{ env.FIREBASE_KEY }}" > ./src/main/resources/firebase/firebase-key.json
    - uses: actions/upload-artifact@v2
      with:
        name: firebase-key.json
        path: ./src/main/resources/firebase/firebase-key.json

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1

    ## docker login
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

      ## docker build & push to develop
    - name: Docker build & push to dev
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

#      if: contains(github.ref, 'develop')
#      run: |
#        docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }} .
#        docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }}

      ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        key: ${{ secrets.SSH_KEY }}
        script: |
          docker stop ${{ env.PROJECT_NAME }}
          docker rm ${{ env.PROJECT_NAME }}
          docker rmi -f $(docker images -q)
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
          docker run -d --name ${{ env.PROJECT_NAME }} -p 8080:8080 ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }}

  ## time
  current-time:
    needs: CI-CD
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash

  ## slack
  action-slack:
    needs: CI-CD
    runs-on: ubuntu-latest
    steps:
        - name: Slack Alarm
          uses: 8398a7/action-slack@v3
          with:
              status: ${{ job.status }}
              author_name: GitHub-Actions CI/CD
              fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
          if: always() # Pick up events even if the job fails or is canceled.
